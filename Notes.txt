**BUILDING PROJECT
*get temp folder within template files
*create package.json    ->npm init
*use ecma script modules    ->entry package json and add after main, "type": "module"
*create app.js          ->because of being starter file
**move temp public files to public folder (.css, .js, imgs)
**create views folder


**EXPRESS
*import express to a page and use it with app=express()
*express uses app.listen(port) and app.get('/', function) to run in localhost
*define static file defination as a public folder
app.use(express.static('public'))
http://localhost:3000/css or images or js/style.css
*to parse elements comes from form, we need to use `app.use(express.urlencoded({ extended: true }))` in app.js

**PACKAGES
    *install express        ->npm i express
    *install nodemon        ->npm i -D nodemon (-d parameter represents that it runs just in development envoirement) 
        -it located is in devdependicies
        -to use it, change scripts->test section as scripts->start:"nodemon app.js"
        -you can use by npm start
    *install dotenv package, it used for to reach out .env file to use it in the application
        -to use it, import it in the app.js import dotenv from "dotenv"
        -and call config method in app.js by dotenv.config()

    *install mongoose, it used for to create modelling to work with mongodb simulteniously
    *install bcrypt package to encrypt passwords by install i bcrypt
    *install cookie-parser     to store jwt to the cookie, we need to use cookie parser by npm i cookie-parser
    *install validator to show errors came from forms npm i validator
    *install method override method to send put method to the browser npm i method-override
    *install nodemailer to get information from website via email with npm install nodemailer
        -settings->security->app passwords->select app and device and generate
        -write these password and email to the env file




*template engine
    -install ejs ->npm i ejs
    -define in app.js ->app.set('view engine', 'ejs')
    -convert index.html to index.ejs


**GITHUB
    *create repository on github (just entry on prj name)
    *git config --global user.email "sametsahinx@gmail.com"
    *git config --global user.name "sametsahin"
    *git init (create local repository)
    *create .gitignore file
        -use gitignore template from https://www.toptal.com/developers/gitignore/api/node
    *git add . (add whole file to the local repository)
    *git commit -m "begin files of the prj"
    *git branch -m main
    *git push -u origin main

**MONGODB
    *Create Cluster
        -signup mongo db website
        -to create a new db->click Build a database->free shared->create clustur
        -define an username and password
        -define ip address which users can be connect it.
    *Connect db
        -connect->connect your application->there are many drivers to connect your application via connection string. Take it suitable for you
        -create .env file in your application in root directory to store your veriables (db infos)

    *Create db
        -click browse collection on your cluster
        -add my own data->dbname, collection name

    *Define db to your application 
    with db.ejs and all back it in app.js


**MODEL
schema->model->db document
*create first model in models
    -define attribute belongs to model like name, description, uploadedAt

**THUNDERCLIENT
    *install thunderclient extension to the vs code
    *collection->new collection
    *click new request from mostright of the project name 
    *choose a process that wheter GET, POST or whatever, and you can send a request with body then json.
    *you will get an error when you send post request, you need to add app.use(express.json()) to the app.js
    *after this level, you will be adding the item to the mongodb
    *to get object properly from the db, we have to change controller method the the async await structure.

**JWT
    *It is a standard that JSON based provides verification of data. Consists of three sections, these are:
        header: algorithm & token type  ->  'typ':"jwt" 
        payload: data                   ->  {'username':'sametsahin', 'name':'samet'}
        verify signature:               ->  HMACSHA256{ENCODES}
    
    *You need to review middleware method to fully understand

**COOKIE
    *to check cookies on the browser,
        -Inspect->application->Cookies


**CLOUDINARY
    *add three key and value to the .env file
    *install cloudinary package to use cloudinary
        -npm i cloudinary
    *install fileupload package to use main propery when picture uploaded by npm i express-fileupload
    *use these package in app.js
    *config cloudinary package in app.js by cloudinary.config({})
    *use fileupload with config temp files->app.use(fileUpload({useTempFiles:true}))


**DEVELOPMENT
    *package.json->scripts->start->
        -change command from nodemon to node
    *create Procfile to the main directory
        -web: node app.js (whatever your start file)
    *login Heroku and new