**BUILDING PROJECT
*get temp folder within template files
*create package.json    ->npm init
*use ecma script modules    ->entry package json and add after main, "type": "module"
*create app.js          ->because of being starter file
**move temp public files to public folder (.css, .js, imgs)
**create views folder


**EXPRESS
*import express to a page and use it with app=express()
*express uses app.listen(port) and app.get('/', function) to run in localhost
*define static file defination as a public folder
app.use(express.static('public'))
http://localhost:3000/css or images or js/style.css

**PACKAGES
*install express        ->npm i express
*install nodemon        ->npm i -D nodemon (-d parameter represents that it runs just in development envoirement) 
    -it located is in devdependicies
    -to use it, change scripts->test section as scripts->start:"nodemon app.js"
    -you can use by npm start
*install dotenv package, it used for to reach out .env file to use it in the application
    -to use it, import it in the app.js import dotenv from "dotenv"
    -and call config method in app.js by dotenv.config()

*install mongoose, it used for to create modelling to work with mongodb simulteniously


*template engine
    -install ejs ->npm i ejs
    -define in app.js ->app.set('view engine', 'ejs')
    -convert index.html to index.ejs


**GITHUB
*create repository on github (just entry on prj name)
*git config --global user.email "sametsahinx@gmail.com"
*git config --global user.name "sametsahin"
*git init (create local repository)
*create .gitignore file
    -use gitignore template from https://www.toptal.com/developers/gitignore/api/node
*git add . (add whole file to the local repository)
*git commit -m "begin files of the prj"
*git branch -m main
*git push -u origin main

**MONGODB
*Create Cluster
    -signup mongo db website
    -to create a new db->click Build a database->free shared->create clustur
    -define an username and password
    -define ip address which users can be connect it.
*Connect db
    -connect->connect your application->there are many drivers to connect your application via connection string. Take it suitable for you
    -create .env file in your application in root directory to store your veriables (db infos)

*Create db
    -click browse collection on your cluster
    -add my own data->dbname, collection name

*Define db to your application 
with db.ejs and all back it in app.js


**MODEL
schema->model->db document
*create first model in models
    -define attribute belongs to model like name, description, uploadedAt

